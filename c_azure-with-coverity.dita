<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_n3s_tjp_cyb">
    <title>Using Azure DevOps Extension with Coverity Connect with Thin Client</title>
    <body>
        <section id="section_u5k_1qz_wxb">
            <p>Synopsys Security Scan only supports the Coverity Connect with thin client deployment
                model.</p>
            <p>On push events, a full Coverity scan will be run and results are committed to the
                Coverity server database.</p>
            <p> On pull request events, comments are added to pull requests for new issues found by
                the scan if <codeph>BRIDGE_COVERITY_AUTOMATION_PRCOMMENT</codeph> is set to
                    <codeph>true</codeph> (see example below). Note that scan results are not
                committed to Coverity server database in this case.</p>
            <p>Before running the pipeline with Synopsys Security Scan, make sure the specified
                project and stream exist in your Coverity server. Configure sensitive data such as
                usernames and passwords using pipeline variables.</p>
            <p>Here is an example <codeph>azure-pipelines.yml</codeph> that you can use to
                integration Coverity into your Azure
                pipeline:<codeblock id="codeblock_bf2_nv4_gyb">trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: coverity
  
steps:
- task: SynopsysSecurityScan@1.0.0
  displayName: 'Coverity Full Scan'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  inputs:
    BRIDGE_COVERITY_CONNECT_URL: <varname>$(COVERITY_URL)
</varname>    BRIDGE_COVERITY_CONNECT_USER_NAME: <varname>$(COVERITY_USER)</varname>
    BRIDGE_COVERITY_CONNECT_USER_PASSWORD: <varname>$(COVERITY_PASSPHRASE)
</varname>    BRIDGE_COVERITY_CONNECT_PROJECT_NAME: <varname>$(Build.Repository.Name)
</varname>    BRIDGE_COVERITY_CONNECT_STREAM_NAME: <varname>$(Build.Repository.Name)</varname>-<varname>$(Build.SourceBranchName)
</varname>    BRIDGE_COVERITY_CONNECT_POLICY_VIEW: 'Outstanding Issues'
    ### Uncomment below configuration if Synopsys Bridge diagnostic files needs to be uploaded
    # include_diagnostics: true

- task: SynopsysSecurityScan@1.0.0
  displayName: 'Coverity PR Scan'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  inputs:
    BRIDGE_COVERITY_CONNECT_URL: <varname>$(COVERITY_URL)
</varname>    BRIDGE_COVERITY_CONNECT_USER_NAME: <varname>$(COVERITY_USER)
</varname>    BRIDGE_COVERITY_CONNECT_USER_PASSWORD: <varname>$(COVERITY_PASSPHRASE)
</varname>    BRIDGE_COVERITY_CONNECT_PROJECT_NAME: <varname>$(Build.Repository.Name)
</varname>    BRIDGE_COVERITY_CONNECT_STREAM_NAME: <varname>$(Build.Repository.Name)</varname>-<varname>$(Build.targetBranchName)
</varname>    ### Below configuration is used to enable feedback from Coverity security testing as pull request comment
    BRIDGE_COVERITY_AUTOMATION_PRCOMMENT: true
    AZURE_TOKEN: $(System.AccessToken) # Mandatory when BRIDGE_COVERITY_AUTOMATION_PRCOMMENT is set to 'true'
    ### Uncomment below configuration if Synopsys Bridge diagnostic files needs to be uploaded
    # include_diagnostics: true</codeblock></p>
            <table id="table_yws_tv4_gyb">
                <title>List of mandatory and optional parameters for Coverity below:</title>
                <tgroup cols="3">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <colspec colnum="3" colname="col3"/>
                    <thead>
                        <row>
                            <entry><b>Input Parameter</b></entry>
                            <entry><b>Description</b></entry>
                            <entry><b>Mandatory / Optional</b></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_CONNECT_URL</codeph></entry>
                            <entry>Coverity URL</entry>
                            <entry>Mandatory</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_CONNECT_USER_NAME</codeph></entry>
                            <entry>Coverity Username</entry>
                            <entry>Mandatory</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_CONNECT_USER_PASSWORD</codeph></entry>
                            <entry>Coverity Password</entry>
                            <entry>Mandatory</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_CONNECT_PROJECT_NAME</codeph></entry>
                            <entry>Coverity Project Name</entry>
                            <entry>Mandatory</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_CONNECT_STREAM_NAME</codeph></entry>
                            <entry>Coverity Stream name</entry>
                            <entry>Mandatory</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_INSTALL_DIRECTORY</codeph></entry>
                            <entry>Installation directory of Coverity</entry>
                            <entry>Optional</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_CONNECT_POLICY_VIEW</codeph></entry>
                            <entry>
                                <p>ID or name of policy view to be used to enforce the “break the
                                    build” policy.</p>
                                <p> </p>
                                <p>If issues are found in the specified this view, build will be
                                    failed. </p>
                                <p> Example: <codeph>coverity_policy_view: '100001'</codeph> or
                                        <codeph>coverity_policy_view: 'Outstanding Issues'
                                    </codeph></p>
                            </entry>
                            <entry>Optional</entry>
                        </row>
                        <row>
                            <entry><codeph>BRIDGE_COVERITY_AUTOMATION_PRCOMMENT</codeph></entry>
                            <entry>
                                <p>Option to enable automatic creation pull request comments for new
                                    issues found in the pull request.</p>
                                <p>Merge Request must be created first from feature branch to main
                                    branch to run Coverity PR Comment.</p>
                                <p> </p>
                                <p>Default: <codeph>false</codeph></p>
                                <p>Note - Feature is supported only through yaml configuration</p>
                            </entry>
                            <entry>Optional</entry>
                        </row>
                        <row>
                            <entry><codeph>AZURE_TOKEN</codeph></entry>
                            <entry>
                                <p>Azure Access Token </p>
                                <p> Example: <codeph>AZURE_TOKEN: $(System.AccessToken)</codeph> or
                                        <codeph>AZURE_TOKEN: $(PAT_TOKEN)</codeph></p>
                            </entry>
                            <entry>Mandatory if
                                    <codeph>BRIDGE_COVERITY_AUTOMATION_PRCOMMENT</codeph> is set
                                true.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
    </body>
</topic>
